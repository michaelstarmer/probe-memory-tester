<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Probe Memory Tester</title>
    <link href="https://fonts.googleapis.com/css?family=Poppins:400,500&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="/style.css">
    <link rel="shortcut icon" href="/favicon.ico" />
    <style>

    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inconsolata&display=swap" rel="stylesheet">
</head>

<body>
    <div class="container my-5">
        <div class="row">
            <div class="col-12 text-center">
                <h6>STATUS</h6>
                <h1 id="job-status">
                </h1>
            </div>
        </div>

    </div>
    <div class="container">

        <div class="row">
            <div id="chart" class="col-12 col-lg-8 offset-lg-2"></div>
        </div>
    </div>
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-12 col-lg-5 mb-3">
                <div class="row">
                    <div class="col-12">
                        <table class="table">
                            <tbody>
                                <tr>
                                    <th>Jenkins job</th>
                                    <td><a target="_blank"
                                            href="http://build.dev.btech/job/{{job.jenkinsJob}}">{{job.jenkinsJob}}</a>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Build no.</th>
                                    <td>
                                        <a target="_blank"
                                            href="http://build.dev.btech/job/{{job.jenkinsJob}}/{{job.buildNumber}}">{{job.buildNumber}}</a>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Duration</th>
                                    <td>
                                        <span id="minutes-remaining">{{job.duration}} minutes</span>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Memory stress</th>
                                    @if (job.memory)
                                    <td>{{job.memory}}GB</td>
                                    @else
                                    <td>Not applied</td>
                                    @endif
                                </tr>
                                <tr>
                                    <th>Created at</th>
                                    @if (job.createdAt)
                                    <td>{{job.createdAt.setLocale('no').toFormat('f')}}</td>
                                    @else
                                    <td></td>
                                    @endif
                                </tr>
                                <tr>
                                    <th>Started at</th>
                                    @if (job.startedAt)
                                    <td>
                                        <span id="started-at">
                                            {{job.startedAt.setLocale('no').toFormat('f')}}
                                        </span>
                                    </td>
                                    @else
                                    <td></td>
                                    @endif
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>


                <div class="row my-3">
                    <div class="col-12">
                        <button type="button" class="btn btn-secondary" data-bs-toggle="modal"
                            data-bs-target="#exampleModal">
                            Quick commands
                        </button>
                    </div>
                </div>
            </div>


            <div class="col-12 col-lg-6 offset-lg-1 mb-5 log-wrap">
                <h4>LOG</h4>
                <div id="log" class="snippet">
                    <div id="log-loading">Loading logs...</div>
                </div>
            </div>
        </div>


    </div>




    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Manual commands</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>This is a list of relevant bash commands for interacting with ESXi or the VM host itself.</p>
                    <div class="mb-3">
                        <h6>SSH probe:</h6>
                        <div class="snippet">
                            <span>root@</span><span>{{probeIp.value}}</span>
                        </div>
                    </div>
                    <div class="mb-3">
                        <h6>ESXi get all VMs</h6>
                        <div class="snippet">
                            <span>sshpass -p ldap2retro! ssh 10.0.28.202 vim-cmd vmsvc/getallvms</span>
                        </div>
                    </div>
                    <div class="mb-3">
                        <h6>ESXi reboot VM</h6>
                        <div class="snippet">
                            <span>sshpass -p ldap2retro! ssh 10.0.28.202 vim-cmd vmsvc/power.reset 29</span>
                        </div>
                    </div>
                    <div class="mb-3">
                        <h6>ESXi get all snapshots for VM</h6>
                        <div class="snippet">
                            <span>sshpass -p ldap2retro! ssh 10.0.28.202 vim-cmd vmsvc/snapshot.get 29</span>
                        </div>
                    </div>
                    <div class="mb-3">
                        <h6>ESXi revert to default snapshot</h6>
                        <div class="snippet">
                            <span>
                                sshpass -p ldap2retro! ssh 10.0.28.202 vim-cmd vmsvc/snapshot.revert 29 6 true
                            </span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</body>

<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/moment@^2"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@^1"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous">
</script>
<script>
    var job = {{{JSON.stringify(job)}}}
    var jobId = job.id;
    var stats = job.systemStats;
    var jobLog = [];
    var logDiv = document.getElementById('log')
    var logLoadingState = document.getElementById('log-loading')
    console.log(job)
    console.log(stats)

    function createChart(stats)
    {
        const jobCtx = document.getElementById('chart');
        let existingCanvas = jobCtx.firstElementChild;
        if (existingCanvas)
        {
            existingCanvas.remove()
        }

        ctx = jobCtx.appendChild(document.createElement('canvas'))
    
        let cpu = stats.map(it => it.cpu)
        let mem = stats.map(it => it.mem)
    
        let jobChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: stats.map(it => it.timestamp),
                datasets: [
                    {
                        label: 'CPU %',
                        data: cpu,
                        borderColor: 'rgba(0,0,0, 0.8)',
                        fill: false,
                        tension: .1
                    },
                    {
                        label: 'MEM %',
                        data: mem,
                        borderColor: 'rgba(255, 10, 20, 0.8)',
                        fill: false,
                        tension: .1,
                    },
                ]
            },
            options: {
                scales: {
                    yAxis: {
                        beginAtZero: true,
                    },
                    xAxis: {
                        display: true,
                        type: 'time',
                        time: {
                            parser: 'MM/DD/YYYY HH:mm',
                            tooltipFormat: 'll HH:mm',
                            unit: 'minute',
                            unitStepSize: 20,
                            displayFormats: {
                            'hour': 'HH:mm'
                            }
                        }
                    }
                }
            }
        })
    }

    function refreshData(jobData)
    {
        var el = document.getElementById('job-status')
        var minutesRemaining = document.getElementById('minutes-remaining')
        var startedAt = document.getElementById('started-at')

        el.textContent = jobData.status
        el.className = '' // remove classes
        el.classList.add(`color-${jobData.status}`)
        el.classList.add('uppercase')
        if (jobData.remaining && jobData.remaining >= 1)
        {
            minutesRemaining.textContent = `${jobData.remaining} min. left (${jobData.duration} min.)`
        } else {
            minutesRemaining.textContent = `${jobData.duration} minutes`
        }
    }

    function logScrollToBottom()
    {
        var logDiv = document.getElementById('log')
        logDiv.scrollTop = logDiv.scrollHeight;
    }

    function generateData()
    {
        fetch(`/api/jobs/${jobId}`)
        .then(res => res.json())
        .then(response => refreshData(response))
        .catch(e => console.error(e))
    }

    function generateChart()
    {
        fetch(`/api/jobs/${jobId}`)
        .then(res => res.json())
        .then(response => createChart(response.systemStats))
        .catch(e => console.error(e))
    }

    function addLogEntryDiv(log)
    {
        var logDiv = document.getElementById('log')
        let logItemDiv = document.createElement('div')
        logItemDiv.setAttribute('id', `logitem-${log.id}`)
        if (log.type === 'error')
        {
            logItemDiv.classList.add('log-error')
        }
        else if (log.type === 'warn')
        {
            logItemDiv.classList.add('log-warn')
        }
        logItemDiv.textContent = `${log.created_at} - ${log.message}`;
        logDiv.appendChild(logItemDiv)
        jobLog.push(log)
    }

    function parseLogs(log)
    {
        if (log)
        {
            if (log.length > 0)
            {
                logLoadingState.remove()
            } else {
                logLoadingState.textContent = 'No logs'
            }
        }
        for (let i = 0; i < log.length; i++)
        {
            if (log[i] && !jobLog[i])
            {
                addLogEntryDiv(log[i])
            }
        }
    }

    

    function fetchLogs()
    {
        return new Promise((resolve, reject) => {
            fetch(`/api/jobs/${jobId}/log`)
            .then(res => res.json())
            .then(logArray => {
                console.log(logArray)
                resolve(logArray)
            })
            .catch(e => reject(e))
        })
    }

    function initializeLogs()
    {
        fetchLogs()
        .then(logArray => parseLogs(logArray))
        .catch(e => console.error('parse log error!', e))
    }

    generateData()
    generateChart()
    initializeLogs()
    logScrollToBottom()

    setInterval(() => {
        console.log('Checking for new log entries...')
        fetchLogs()
        .then(logArray => {
            parseLogs(logArray)
            logScrollToBottom()
        })
        generateData()
    }, 1000*2)

    setInterval(() => generateChart(), 1000*25)

</script>

</html>