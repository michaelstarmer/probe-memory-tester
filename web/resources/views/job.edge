@layout('layouts/default')
@section('head')
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inconsolata&display=swap" rel="stylesheet">
@end


@section('body')
<div class="container my-5">
    <div class="row">
        <div class="col-12 text-center">
            <h6>STATUS</h6>
            <h1 id="job-status">
            </h1>
        </div>
    </div>

</div>
<div class="container">

    <div class="row">
        <div id="chart" class="col-12 col-lg-8 offset-lg-2"></div>
    </div>
</div>
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12 col-lg-5 mb-3">
            <div class="row">
                <div class="col-12">
                    <table class="table">
                        <tbody>
                            <tr>
                                <th>Jenkins job</th>
                                <td><a target="_blank"
                                        href="http://build.dev.btech/job/{{job.jenkinsJob}}">{{job.jenkinsJob}}</a>
                                </td>
                            </tr>
                            <tr>
                                <th>Build no.</th>
                                <td>
                                    <a target="_blank"
                                        href="http://build.dev.btech/job/{{job.jenkinsJob}}/{{job.buildNumber}}">{{job.buildNumber}}</a>
                                </td>
                            </tr>
                            <tr>
                                <th>Duration</th>
                                <td>
                                    <span id="minutes-remaining">{{job.duration}} minutes</span>
                                </td>
                            </tr>
                            <tr>
                                <th>Memory stress</th>
                                @if (job.memory)
                                <td>{{job.memory}}GB</td>
                                @else
                                <td>Not applied</td>
                                @endif
                            </tr>
                            <tr>
                                <th>Config</th>
                                @if (job.xmlConfig)
                                <td>
                                    <a target="_blank"
                                        href="/uploads/xml/{{job.xmlConfig.filename}}">{{job.xmlConfig.filename}}</a>
                                </td>
                                @endif
                            </tr>
                            <tr>
                                <th>Created at</th>
                                @if (job.createdAt)
                                <td>{{job.createdAt.setLocale('no').toFormat('f')}}</td>
                                @else
                                <td></td>
                                @endif
                            </tr>
                            <tr>
                                <th>Started at</th>
                                @if (job.startedAt)
                                <td>
                                    <span id="started-at">
                                        {{job.startedAt.setLocale('no').toFormat('f')}}
                                    </span>
                                </td>
                                @else
                                <td></td>
                                @endif
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>


            <div class="row my-3">
                <div class="col-12">
                    <button type="button" class="btn btn-secondary" data-bs-toggle="modal"
                        data-bs-target="#exampleModal">
                        Commands
                    </button>
                    @if(job.status == 'running')
                    <form id="frm-stop-job" action="/jobs/{{ job.id }}/stop" method="get" style="display: inline;"
                        class="">
                        <button type="submit" id="btn-stop-job" class="btn btn-danger">
                            Stop test
                        </button>
                    </form>
                    @endif
                </div>
            </div>
        </div>


        <div class="col-12 col-lg-6 offset-lg-1 mb-5 log-wrap">
            <h4>LOG</h4>
            <div id="log" class="snippet">
                <div id="log-loading">Loading logs...</div>
            </div>
        </div>
    </div>


</div>




@!component('components/cmd-modal')


<script>
    var job = {{{JSON.stringify(job)}}}
    var jobId = job.id;
    var stats = job.systemStats;
    var jobLog = [];
    var logDiv = document.getElementById('log')
    var logLoadingState = document.getElementById('log-loading')
    
    function stopJob(jobId)
    {
        console.log('stop job:', jobId)
        fetch(`/api/jobs/${jobId}/stop`)
        .then(response => {
            console.log('response', response)
        })
        .catch(e => {
            console.log('Error while stopping job:', e)
        })
    }

    function createChart(stats)
    {
        const jobCtx = document.getElementById('chart');
        let existingCanvas = jobCtx.firstElementChild;
        if (existingCanvas)
        {
            existingCanvas.remove()
        }

        ctx = jobCtx.appendChild(document.createElement('canvas'))
    
        let cpu = stats.map(it => it.cpu)
        let mem = stats.map(it => it.mem)
    
        let jobChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: stats.map(it => it.timestamp),
                datasets: [
                    {
                        label: 'CPU %',
                        data: cpu,
                        borderColor: 'rgba(0,0,0, 0.8)',
                        fill: false,
                        tension: .1
                    },
                    {
                        label: 'MEM %',
                        data: mem,
                        borderColor: 'rgba(255, 10, 20, 0.8)',
                        fill: false,
                        tension: .1,
                    },
                ]
            },
            options: {
                scales: {
                    yAxis: {
                        beginAtZero: true,
                    },
                    xAxis: {
                        display: true,
                        type: 'time',
                        time: {
                            parser: 'MM/DD/YYYY HH:mm',
                            tooltipFormat: 'll HH:mm',
                            unit: 'minute',
                            unitStepSize: 20,
                            displayFormats: {
                            'hour': 'HH:mm'
                            }
                        }
                    }
                }
            }
        })
    }

    function refreshData(jobData)
    {
        var el = document.getElementById('job-status')
        var minutesRemaining = document.getElementById('minutes-remaining')
        var startedAt = document.getElementById('started-at')
        var frmStopJob = document.getElementById('frm-stop-job')
        var btnStopJob = document.getElementById('btn-stop-job')
        
        el.textContent = jobData.status
        el.className = '' // remove classes
        el.classList.add(`color-${jobData.status}`)
        el.classList.add('uppercase')

        if (jobData.remaining && jobData.remaining >= 1)
        {
            minutesRemaining.textContent = `${jobData.remaining} min. left (${jobData.duration} min.)`
        } else {
            minutesRemaining.textContent = `${jobData.duration} minutes`
        }

        if (jobData.status !== 'running' && !frmStopJob.classList.contains('hidden'))
        {
            frmStopJob.classList.add('hidden')
            btnStopJob.classList.add('hidden')
        }

    }

    function logScrollToBottom()
    {
        var logDiv = document.getElementById('log')
        logDiv.scrollTop = logDiv.scrollHeight;
    }

    function generateData()
    {
        fetch(`/api/jobs/${jobId}`)
        .then(res => res.json())
        .then(response => refreshData(response))
        .catch(e => console.error(e))
    }

    function generateChart()
    {
        fetch(`/api/jobs/${jobId}`)
        .then(res => res.json())
        .then(response => createChart(response.systemStats))
        .catch(e => console.error(e))
    }

    function addLogEntryDiv(log)
    {
        var logDiv = document.getElementById('log')
        let logItemDiv = document.createElement('div')
        logItemDiv.setAttribute('id', `logitem-${log.id}`)
        if (log.type === 'error')
        {
            logItemDiv.classList.add('log-error')
        }
        else if (log.type === 'warn')
        {
            logItemDiv.classList.add('log-warn')
        }
        logItemDiv.textContent = `${log.created_at} - ${log.message}`;
        logDiv.appendChild(logItemDiv)
        jobLog.push(log)
    }

    function parseLogs(log)
    {
        if (log)
        {
            if (log.length > 0)
            {
                logLoadingState.remove()
            } else {
                logLoadingState.textContent = 'No logs'
            }
        }
        for (let i = 0; i < log.length; i++)
        {
            if (log[i] && !jobLog[i])
            {
                addLogEntryDiv(log[i])
            }
        }
    }

    function fetchLogs()
    {
        return new Promise((resolve, reject) => {
            fetch(`/api/jobs/${jobId}/log`)
            .then(res => res.json())
            .then(logArray => {
                console.log(logArray)
                resolve(logArray)
            })
            .catch(e => reject(e))
        })
    }

    function initializeLogs()
    {
        fetchLogs()
        .then(logArray => parseLogs(logArray))
        .then(() => logScrollToBottom())
        .catch(e => console.error('parse log error!', e))
    }

    generateData()
    generateChart()
    initializeLogs()

    setInterval(() => {
        console.log('Checking for new log entries...')
        fetchLogs()
        .then(logArray => {
            parseLogs(logArray)
            logScrollToBottom()
        })
        generateData()
    }, 1000*2)

    setInterval(() => generateChart(), 1000*25)

</script>
@end