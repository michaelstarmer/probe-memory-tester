@layout('layouts/default')
@section('head')
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inconsolata&display=swap" rel="stylesheet">
@end


@section('body')
<div class="container mb-3">
    <div class="row">
        <div class="col-12 text-center">
            <h6>STATUS</h6>
            <h1 id="job-status">
            </h1>
        </div>
    </div>

</div>
<div class="container-fluid" style="background: rgba(150, 150, 150, .1);">
    <div class="container py-5">

        <div class="row">
            <div class="col-md-12 col-lg-4 mb-3 d-flex flex-column justify-content-center">
                <div class="row">
                    <div class="col-12">
                        <table class="table">
                            <tbody>
                                <tr>
                                    <th>Jenkins job</th>
                                    <td><a target="_blank"
                                            href="http://build.dev.btech/job/{{job.jenkinsJob}}">{{job.jenkinsJob}}</a>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Build no.</th>
                                    <td>
                                        <a target="_blank"
                                            href="http://build.dev.btech/job/{{job.jenkinsJob}}/{{job.buildNumber}}">{{job.buildNumber}}</a>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Duration</th>
                                    <td>
                                        <span id="minutes-remaining">{{job.duration}} minutes</span>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Memory stress</th>
                                    @if (job.memory)
                                    <td>{{job.memory}}GB</td>
                                    @else
                                    <td>Not applied</td>
                                    @endif
                                </tr>
                                <tr>
                                    <th>Config</th>
                                    @if (job.xmlConfig)
                                    <td>
                                        <a target="_blank"
                                            href="/public/uploads/xml/{{job.xmlConfig.filename}}">{{job.xmlConfig.filename}}</a>
                                    </td>
                                    @endif
                                </tr>
                                <tr>
                                    <th>Created at</th>
                                    @if (job.createdAt)
                                    <td>{{job.createdAt.setLocale('no').toFormat('f')}}</td>
                                    @else
                                    <td></td>
                                    @endif
                                </tr>
                                {{--  <tr>
                                    <th>Started at</th>
                                    @if (job.startedAt)
                                    <td>
                                        <span id="started-at">
                                            {{job.startedAt.setLocale('no').toFormat('f')}}
                                </span>
                                </td>
                                @else
                                <td></td>
                                @endif
                                </tr> --}}
                            </tbody>
                        </table>
                    </div>
                </div>
    
    
                <div class="row my-3">
                    <div class="col-12">
                        <button type="button" class="btn btn-secondary" data-bs-toggle="modal"
                            data-bs-target="#exampleModal">
                            Commands
                        </button>
                        @if(job.status == 'running')
                        <form id="frm-stop-job" action="/jobs/{{ job.id }}/stop" method="get" style="display: inline;"
                            class="">
                            <button type="submit" id="btn-stop-job" class="btn btn-danger">
                                Stop test
                            </button>
                        </form>
                        @endif
                    </div>
                </div>
            </div>
    
            <div id="chart" class="col-12 col-lg-6 offset-lg-2"></div>
            
        </div>
    </div>

</div>
<div class="container-fluid py-3 mt-5" >
    <div class="container">

        <div class="row">
            
            <div class="col-12 col-lg-6 mb-5 d-flex flex-column justify-content-center log-wrap">
                {{--  <h4>LOG</h4>  --}}
                
                <div id="log" class="snippet">
                    <div id="log-loading">Loading logs...</div>
                </div>
            </div>
            <div id="procs" class="col-12 col-lg-3 offset-lg-2">
                <table class="table">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">Proc</th>
                            <th scope="col">Mem%</th>
                            <th scope="col">CPU%</th>
                        </tr>
                    </thead>
                    <tbody>
                        @each(proc in job.procStats)
                        <tr>
                            <td class="col" scope="row">{{ proc.name }}</td>
                            <td class="col" scope="row">{{ proc.mem }}</td>
                            <td class="col" scope="row">{{ proc.cpu }}</td>
                        </tr>
                        @endeach
                    </tbody>
                </table>
            </div>
    
        </div>
    </div>

</div>


<div class="container mb-5">
    <div class="row">
        <div class="col-12 col-lg-12">
            @if(job.securityAudit)
            <h3>Reports</h3>
            <div class="card text-center mb-5">
                <div class="card-header">
                    <h5 class="card-title">Greenbone Vulnerability Scanner</h5>
                </div>
                <div class="card-body">
                    
                    <p class="card-text my-3">
                        @if(!job.securityAudit.vulnCountTotal)
                        <h5>No vulnerabilities discovered</h5>
                        @else
                        <h5>{{job.securityAudit.vulnCountTotal}} vulnerabilities discovered</h5>
                        @endif
                        <h5>
                            <span class="mx-2" title="High">
                            <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="#ff0000"
                                class="bi bi-exclamation-circle-fill" viewBox="0 0 16 16">
                                <path
                                    d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z" />
                            </svg>
                            {{ job.securityAudit.vulnCountHigh }}

                            </span>

                            <span class="mx-2" title="Medium">
                                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="#fd7e14" class="bi bi-exclamation-triangle-fill" viewBox="0 0 16 16">
                                <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                                </svg>
                                {{ job.securityAudit.vulnCountMedium }}
                            </span>

                            <span class="mx-2" title="Low">
                                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-info-circle-fill" viewBox="0 0 16 16">
                                <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
                                </svg>
                                {{ job.securityAudit.vulnCountLow }}
                            </span>
                        </h5>
                    </p>
                    
                    <p class="card-text my-3">
                        @if(job.securityAudit.status != 'waiting')

                        <p>
                            View job <a href="https://10.0.28.89/report/{{ job.securityAudit.gvmReportId }}">in GVM</a>
                        </p>
                        
                        @endif

                    </p>
                    @if(job.securityAudit.pdf)
                    <a href="/public/{{job.securityAudit.pdf}}" class="btn"><img src="/ic/pdf-48.png" height="24" width="24">
                        Scan report</a>
                    <a href="/jobs/{{ job.id }}/export-security-report" class="btn btn-primary">Export</a>
                    @endif
                </div>
                <div class="card-footer text-muted">
                    @if(job.securityAudit.status == 'waiting')
                    WAITING
                    @elseif(job.securityAudit.status == 'completed')
                    <div class="progress">
                        <div class="progress-bar bg-success" role="progressbar" style="width: 100%;" aria-valuenow="100"
                            aria-valuemin="0" aria-valuemax="100">
                            Done</div>
                    </div>
                    @else
                    <div class="progress">
                        <div class="progress-bar {{ job.securityAudit.status == 'running' ? 'bg-warning' : 'bg-success'}}"
                            role="progressbar" style="width: {{ job.securityAudit.progress }}%;"
                            aria-valuenow="{{ job.securityAudit.progress }}" aria-valuemin="0" aria-valuemax="100">
                            {{ job.securityAudit.progress }}%</div>
                    </div>
                    @endif
                    
                </div>
            </div>
            @endif
        </div>
    </div>
</div>



@!component('components/cmd-modal')
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<script>
    var job = {{{JSON.stringify(job)}}}
    var jobId = job.id;
    var stats = job.systemStats;
    var jobLog = [];
    var alertLog = [];
    var logDiv = document.getElementById('log')
    var logLoadingState = document.getElementById('log-loading')

    var logDiv = document.getElementById('log')
    let userScrolledLog = false;
    
    function stopJob(jobId)
    {
        console.log('stop job:', jobId)
        fetch(`/api/jobs/${jobId}/stop`)
        .then(response => {
            console.log('response', response)
        })
        .catch(e => {
            console.log('Error while stopping job:', e)
        })
    }

    function createChart(stats)
    {
        const jobCtx = document.getElementById('chart');
        let existingCanvas = jobCtx.firstElementChild;
        if (existingCanvas)
        {
            existingCanvas.remove()
        }

        ctx = jobCtx.appendChild(document.createElement('canvas'))
    
        let cpu = stats.map(it => it.cpu)
        let mem = stats.map(it => it.mem)
    
        let jobChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: stats.map(it => it.timestamp),
                datasets: [
                    {
                        label: 'CPU %',
                        data: cpu,
                        borderColor: 'rgba(0,0,0, 0.8)',
                        fill: true,
                        tension: .1
                    },
                    {
                        label: 'MEM %',
                        data: mem,
                        borderColor: 'rgba(255, 10, 20, 0.8)',
                        fill: false,
                        tension: .1,
                    },
                ]
            },
            options: {
                scales: {
                    yAxis: {
                        beginAtZero: true,
                    },
                    xAxis: {
                        display: true,
                        type: 'time',
                        time: {
                            parser: 'MM/DD/YYYY HH:mm',
                            tooltipFormat: 'll HH:mm',
                            unit: 'minute',
                            unitStepSize: 10,
                            displayFormats: {
                            'hour': 'HH:mm'
                            }
                        }
                    }
                }
            }
        })
    }

    google.charts.load('current', {
        callback: drawChart,
        packages: ['corechart', 'line']
    })
    google.charts.setOnLoadCallback(drawChart)

    function drawChart(stats)
    {
        var data = new google.visualization.DataTable();
        data.addColumn('date', 'X')
        data.addColumn('number', 'Mem')
        data.addColumn('number', 'Cpu')

        var rows = []
        if (!stats) return
        stats.map(it => rows.push([new Date(it.timestamp), it.mem, it.cpu]))
        console.log(rows)
        
        data.addRows(rows)

        var options = {
            height: 500,
            enableInteractivity: true,
            chartArea: {
                width: '85%'
            },
            hAxis: {
                title: 'Time',
                logScale: false,
                gridlines: {
                    units: {
                    days: {format: ['MMM dd']},
                    hours: {format: ['HH:mm', 'ha']},
                    }
                },
                minorGridlines: {
                    units: {
                        hours: { format: ['hh:mm:ss f', 'no'] }
                    }
                }
            },
            vAxis: {
                title: 'Resources',
                logScale: false,
            },
            colors: ['#a52714', '#097138'],
            backgroundColor: 'transparent',
            legend: {
                position: 'bottom',
            }
        };

        var chart = new google.visualization.LineChart(document.getElementById('chart'))
        chart.draw(data, options);
    }

    function refreshData(jobData)
    {
        var jobStatus = document.getElementById('job-status')
        var minutesRemaining = document.getElementById('minutes-remaining')
        var startedAt = document.getElementById('started-at')
        var frmStopJob = document.getElementById('frm-stop-job')
        var btnStopJob = document.getElementById('btn-stop-job')
        
        jobStatus.textContent = jobData.status
        jobStatus.className = '' // remove classes
        
        jobStatus.classList.add(`color-${jobData.status}`)
        jobStatus.classList.add('uppercase')

        if (jobData.remaining && jobData.remaining >= 1)
        {
            minutesRemaining.textContent = `${jobData.remaining} min. left (${jobData.duration} min.)`
        } else {
            minutesRemaining.textContent = `${jobData.duration} minutes`
        }

        if (jobData.status !== 'running' && frmStopJob)
        {
            frmStopJob.classList.toggle('hidden')
            btnStopJob.classList.toggle('hidden')
            
        }

    }

    function logScrollToBottom()
    {
        logDiv.scrollTop = logDiv.scrollHeight;
    }

    function generateData()
    {
        fetch(`/api/jobs/${jobId}`)
        .then(res => res.json())
        .then(response => refreshData(response))
        .catch(e => console.error(e))
    }

    function generateChart()
    {
        fetch(`/api/jobs/${jobId}`)
        .then(res => res.json())
        .then(response => createChart(response.systemStats))
        .catch(e => console.error(e))
    }

    function addDivToLogging(singleLog) {
        var logElement = document.getElementById('log');
        var newLogDiv = document.createElement('div');
        newLogDiv.setAttribute('id', `logitem-${singleLog.id}`)
        if (singleLog.type) {
            newLogDiv.classList.add(`log-${singleLog.type}`)
        }
        else if (singleLog.level) {
            newLogDiv.classList.add(`log-alert--${singleLog.level}`);
        }
        newLogDiv.textContent = `${singleLog.created_at}: ${singleLog.message}`;
        logElement.appendChild(newLogDiv);
    }


    function parseLogs(log, isAlert=false)
    {
        // Handle empty state before populating
        if (log) {
            if (log.length > 0) {
                logLoadingState.remove()
            } else {
                logLoadingState.textContent = 'No logs'
            }
        }
        // parse each log entry based on log type
        for (let i = 0; i < log.length; i++)
        {
            let logItem = log[i]
            // default logs
            if (logItem.type && !jobLog[i]) {
                addDivToLogging(logItem)
                jobLog.push(logItem)
            }
            // alert logs
            else if (logItem.level && !alertLog[i]) { // alert log
                addDivToLogging(logItem)
                alertLog.push(logItem)
            }
        }
    }

    function fetchLogs()
    {
        return new Promise((resolve, reject) => {
            fetch(`/api/jobs/${jobId}/log`)
            .then(res => res.json())
            .then(logArray => resolve(logArray))
            .catch(e => reject(e))
        })
    }

    function fetchAlerts()
    {
        return new Promise((resolve, reject) => {
            fetch(`/api/jobs/${jobId}/alerts`)
            .then(res => res.json())
            .then(alerts => resolve(alerts))
            .catch(e => reject(e))
        })
    }

    function initializeLogs()
    {
        fetchLogs()
        .then(logArray => {
            fetchAlerts()
            .then(alertArray => {
                parseLogs(logArray.concat(alertArray))
            })
        })
        .catch(e => console.error('parse log error!', e))

        logScrollToBottom()
    }

    generateData()
    generateChart()
    initializeLogs()

    setInterval(() => {
        fetchLogs()
        .then(logArray => {
            fetchAlerts(alertArray => {
                parseLogs(logArray.concat(alertArray))
            })
            if (!userScrolledLog) {
                // don't auto scroll if user scrolled logs
                logScrollToBottom()
            }
        })
        generateData()
    }, 1000*2)

    setInterval(() => generateChart(), 1000*25)

    logDiv.addEventListener('scroll', () => userScrolledLog = true)

</script>
@end