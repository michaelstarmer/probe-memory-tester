@layout('layouts/default')
@set('nav', 'newJob')
@section('body')

<div class="container my-5">
    @if(error)
    <div class="row justify-content-md-center">
        <div class="col-12 col-md-6">
            <div class="alert alert-danger" role="alert">
                {{ error }}
            </div>

        </div>
    </div>
    @endif
    <div class="row justify-content-md-center">
        <div class="col-12 col-lg-8">
            <h1>Create new test</h1>
            <p>Manually create a new test based on available jobs from Jenkins. The latest successful build will
                be fetched automatically.</p>
            <form action="/jobs/createCustom" method="POST">

                <div class="row">
                    <div class="col-12 col-lg-8">
                        <div class="form-group mt-3">
                            <label for="">Jenkins job</label>
                            <select name="jenkinsJob" id="jenkinsJob" class="form-select" required>
                                <option disabled selected>Select</option>
                                @if(jobs)
                                @each(job in jobs)
                                <option value="{{job}}">{{job}}</option>
                                @endeach
                                @endif
                            </select>
                        </div>
                    </div>
                    <div class="col-12 col-lg-4">
                        <div class="form-group mt-3">
                            <label for="selectBuildNumber">Build no.</label>
                            <select name="buildNumber" id="selectBuildNumber" class="form-select" required>
                                <option disabled selected>Build number</option>
                            </select>
                            {{--  <label for="">Build no. (optional)</label>
                            <input type="number" name="buildNumber" class="form-control" placeholder="Latest build">  --}}
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 col-lg-6">
                        <div class="form-group mt-3">
                            <label for="">Increase RAM usage(GB)</label>
                            {{--  <input type="range" class="form-range" min="0" max="12" name="memory" data="0">  --}}
                            <input type="number" class="form-control" name="memory" value="0">
                        </div>
                    </div>
                    <div class="col-12 col-lg-6">
                        <div class="form-group mt-3">
                            <label>Test duration</label>
                            <select name="duration" class="form-select">
                                <option value="30" selected>30 minutes</option>
                                <option value="60">1 hour</option>
                                <option value="120">2 hours</option>
                                <option value="460">6 hours</option>
                                <option value="720">12 hours</option>
                                <option value="1440">24 hours</option>
                                <option value="2880">48 hours</option>
                                <option value="4320">72 hours</option>
                            </select>
                        </div>
                    </div>


                </div>

                <div class="row">
                    <div class="col-12 mt-3">
                        <h5>XML configuration</h5>
                        <p class="text-muted">
                            Custom config files can also be <a href="/uploads">uploaded here</a>.
                        </p>
                    </div>
                    <div class="col-12 col-lg-7 mb-3">
                        <div class="form-group">
                            <label>Select a file</label>
                            <select name="xmlFileId" id="xmlFileId" size="5" class="form-select"
                                onchange="showXmlInfo()" required>
                                @each(file in xmlFiles)
                                @if (!file.isArchived)
                                <option value="{{file.id}}" data-filename="{{file.filename}}"
                                    data-description="{{file.description}}" data-uploadedat="{{file.uploadedAt}}">
                                    {{file.originalFilename}}
                                </option>
                                @endif
                                @endeach
                            </select>
                        </div>
                    </div>
                    <div id="metadata" class="col-12 col-lg-5 form-group hidden">
                        <h5>About XML</h5>
                        <div id="selectedXmlFileDescription"></div>
                        <div id="selectedXmlFileName" class="mb-2" style="word-wrap: break-word;"></div>
                        <div id="selectedXmlFileUploadedAt"></div>
                    </div>
                </div>





                {{--  <div class="form-group mt-3">
                            <label for="">Build number (default = latest)</label>
                            <input type="text" class="form-control" disabled>
                        </div>  --}}

                {{--  <p class="text-muted">Not yet implemented</p>  --}}
                <div class="form-group my-3">
                    <div class="form-check">
                        <label class="form-check-label">
                            <input type="checkbox" class="form-check-input" name="securityAudit" checked>
                            Perform vulnerability scan with report
                        </label>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary btn-block mt-3">Save</button>
            </form>

        </div>


    </div>
</div>


<script>
    var selectedXmlFileName = document.getElementById('selectedXmlFileName')
    var selectedXmlFileDescription = document.getElementById('selectedXmlFileDescription')
    var selectedXmlFileUploadedAt = document.getElementById('selectedXmlFileUploadedAt')
    var metadataWrap = document.getElementById('metadata')
    var selectBuildNumber = document.getElementById('selectBuildNumber')
    var selectJenkinsJob = document.getElementById('jenkinsJob')

    function showXmlInfo()
    {
        var xmlSelector = document.getElementById('xmlFileId')
        var selectedOption = xmlSelector.options[xmlSelector.selectedIndex];
        if (!selectedOption)
        {
            return false;
        }
        console.log(selectedOption.dataset)
        let host = window.location.hostname
        host = `${window.location.protocol}//${host}`
        let fullFilePath = `/uploads/xml/${selectedOption.dataset.filename}`
        let url = encodeURI(fullFilePath.trim())

        metadataWrap.classList.contains('hidden') && metadataWrap.classList.remove('hidden')

        selectedXmlFileName.innerHTML = `<a target="popup" onclick="window.open('${url}', 'popup', 'width=600,height=600')" href="${url}">Link to file</a>`  ;
        selectedXmlFileDescription.textContent = `${selectedOption.dataset.description}`;
        selectedXmlFileUploadedAt.textContent = `Uploaded ${selectedOption.dataset.uploadedat}`;
    }
    showXmlInfo()

    function fetchJobBuilds(jenkinsJob)
    {
        const uri = encodeURI(`http://10.0.31.142/job/${jenkinsJob}/api/json`)
        console.log('Fetching builds:', uri)
        return new Promise((resolve, reject) => {
            fetch(uri)
            .then(res => res.json())
            .then(job => resolve({ builds: job.builds, lastSuccessful: job.lastSuccessfulBuild }))
            .catch(e => reject(e))
        })
    }
    function populateBuildNumberDropdown(buildData)
    {
    
        let defaultBuildNumber = document.createElement('option')
        let lastSuccessfulBuildNo = buildData['lastSuccessful'].number;
        selectBuildNumber.innerHTML = ""
        defaultBuildNumber.textContent = lastSuccessfulBuildNo;
        defaultBuildNumber.setAttribute('value', lastSuccessfulBuildNo)
        defaultBuildNumber.setAttribute('selected', 'selected')
        selectBuildNumber.appendChild(defaultBuildNumber);
        for (const build of buildData.builds)
        {
            if (build.number === lastSuccessfulBuildNo)
                continue;
            let option = document.createElement('option')
            option.textContent = build.number;
            option.setAttribute('value', build.number)
            selectBuildNumber.appendChild(option)
        }
        
    }

    selectJenkinsJob.addEventListener('change', (e) => {
        if (!selectJenkinsJob.value || selectJenkinsJob.value === "")
        {
            return false;
        }
        fetchJobBuilds(selectJenkinsJob.value)
        .then(buildData => populateBuildNumberDropdown(buildData))
        .catch(e => console.error('Error fetching builds!', e));
    })
    // populateBuildNumberDropdown('CentOS7-based_6.1')
</script>
@end