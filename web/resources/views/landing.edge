@layout('layouts/default')
@section('body')

    <div class="container-fluid mb-5">

      <div class="row justify-content-md-center">
        
      </div>
      <div class="row justify-content-md-center">



        <div class="col-12 col-lg-6 d-flex flex-column justify-content-between mt-2">

          <div class="card">
            @if(error)
            <div class="alert alert-warning" role="alert">
              {{ error }}
            </div>
            @endif
            <div class="desktop vm-card">

              
              <h6 class="desktop-title mb-3">
                @if(probeData.ip)
                {{probeData.ip}}
                @else
                N/A
                @endif
              </h6>
              <p style="font-size: 12px;">
                @if(probeData.swVersion)
                {{ probeData.swVersion }}
                @endif
              </p>
            </div>
            <div class="card-body mb-1 p-0 text-center">

              @if(probeData.isOffline)
              <div class="status-lamp status-lamp--red">&nbsp; </div>
              <div class="inline-block status-text"> Offline</div>
              @else
              <div class="status-lamp status-lamp--green">&nbsp;</div>
              <div class="inline-block status-text"> Online</div>
              @endif

            </div>

            <div class="card-body text-center">
              <a href="/settings" class="btn btn-warning btn-sm">Settings</a>
              <a href="/apidoc" class="btn btn-secondary btn-sm">API doc</a>
              <!-- modal button -->
              <button type="button" class="btn btn-secondary btn-sm" data-bs-toggle="modal"
                  data-bs-target="#exampleModal">
                  Commands
              </button>
              
              @if(!probeData.isOffline)
              {{--  <a href="http://{{probeData.ip}}:8080/monitorix-cgi/monitorix.cgi?mode=localhost&graph=all&when=1day&color=black"
              target="_blank" class="btn btn-primary btn-sm">Monitor</a> --}}
              @endif
              {{--  <a href="#" class="card-link">Another link</a>  --}}
            </div>
            <div class="text-center mb-1">

              <a href="http://trac.dev.btech/trac/wiki/minnetester">View in Trac</a>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="container-fluid mb-5">


    </div>
    <div id="graphs">

    </div>



    <div class="container my-3">
      <div class="row">
        <div class="col-6">
          <a href="/jobs/new" class="btn btn-default">Create new</a>
        </div>
      </div>
    </div>
    <div class="container-fluid my-3">

      @each(job in jobs)
      <div class="card card--job">
        <div class="card-body">
          <h6 class="card-title">
            {{job.jenkinsJob}}
          </h6>
          <h6 class="card-subtitle mb-2 text-muted">
            Build #{{job.buildNumber}}
            @if(job.status == 'completed')
            <span class="badge bg-success rounded-pill mx-1">Done</span>
            @elseif(job.status == 'running')
            <span class="badge bg-info rounded-pill mx-1">Running</span>
            @elseif(job.status == 'initializing')
            <span class="badge bg-warning rounded-pill mx-1">Initializing</span>
            @elseif(job.status == 'failed')
            <span class="badge bg-danger rounded-pill mx-1">Failed</span>
            @else
            <span class="badge bg-secondary rounded-pill mx-1">Queued</span>
            @endif
          </h6>
          <div class="my-3">
            <div>
              <strong>Duration: </strong>{{job.duration}} minutes
            </div>
            <div>
              <strong>Type: </strong>
              @if(job.isManual)
              MANUAL
              @else
              AUTOMATIC
              @endif
            </div>
            <div>
              <strong>Created: </strong> {{ job.createdAt && job.createdAt.setLocale('no').toFormat('f')}}
            </div>
          </div>
          <a href="/jobs/{{job.id}}" class="card-link">View test details</a>
        </div>
      </div>
      @endeach

    </div>

    <div class="container text-center pb-5">
      <a href="/jobs" class="btn btn-secondary">View all jobs</a>
    </div>

    @!component('components/cmd-modal', { probeIp: probeData.ip })

  <script>
    function createGraph(jobs)
    {

      let test = document.getElementById('jobChart-0')
      let datasets = []
      let chartDiv = document.getElementById('graphs')

      for (const [idx,job] of jobs.entries())
      {
        /* get element */
        let jobCtx = document.getElementById(`job-${idx}`);
        
        if (!jobCtx)
        {
          console.log('element not found. creating new.')
          /* create element */
          jobCtx = chartDiv.appendChild(document.createElement('div'))
          jobCtx.setAttribute('id', `job-${idx}`)
        } else {
          console.log('element found!')
        }

        jobCtx.classList.add('my-5')
        jobCtx.innerHTML = '<h1>RAM set: ' + job.memory + 'GB</h1>'
        let ctx = jobCtx.appendChild(document.createElement('canvas'));
        
        let cpu = job.systemStats.map(it => it.cpu)
        let mem = job.systemStats.map(it => it.mem)

        let t = {
          label: 'test',
          data: mem,
        }


        let jobChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: job.systemStats.map(it => it.timestamp),
            datasets: [
              {
                label: 'CPU %',
                data: cpu,
                borderColor: 'rgba(0, 0, 0, 0.8)',
                // borderWidth: 1,
                fill: false,
                tension: 0.1
              },
              {
              label: 'MEM %',
              data: mem,
              borderColor: 'rgba(255, 10, 20, 0.8)',
              // borderWidth: 1,
              fill: false,
              tension: 0.1
              },
          ]
          },
          options: {
            scales: {
              yAxis: {
                beginAtZero: true,
              },
              xAxis: {
                display: true,
                type: 'time',
                time: {
                  parser: 'MM/DD/YYYY HH:mm',
                  tooltipFormat: 'll HH:mm',
                  unit: 'minute',
                  unitStepSize: 20,
                  displayFormats: {
                    'hour': 'HH:mm'
                  }
                }
              }

            }
          }
        }) 
      }
    }

    function fetchAndGenerateChart()
    {
      fetch('/api/jobs')
      .then(res => res.json())
      .then(response => createGraph(response))
      .catch(e => console.log(e))
    }

    function fetchProbeConfig()
    {
      return new Promise((resolve, reject) => {
        fetch('/api/probe-config')
        .then(res => res.json())
        .then(response => resolve(response))
        .catch(e => reject(e))
      })
    }


    // fetchProbeConfig()
    //   .then(config => console.log(config))

    /* Initial setup */
    // fetchAndGenerateChart()

    /* Update every minute */
    setInterval(() => {
      // console.log('[ INTERVAL ] Fetching jobs')
      // fetchAndGenerateChart()
    }, 1000*60)

  </script>
@end
